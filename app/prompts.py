INSTRUCOES_IA = """
Voc√™ √© um engenheiro de software s√™nior. Analise cuidadosamente o arquivo Python a seguir e gere uma documenta√ß√£o t√©cnica extremamente detalhada em **portugu√™s do Brasil**.

REGRAS DE FORMATA√á√ÉO (OBRIGAT√ìRIO):
- A sa√≠da deve usar APENAS estas marca√ß√µes, compat√≠veis com meu gerador de .docx:
  - T√≠tulo principal: linha iniciando com `H1: `
  - T√≠tulos de se√ß√£o: linhas iniciando com `H2: `
  - Lista de 1¬∫ n√≠vel: linhas iniciando com `* `
  - Lista aninhada (subitens): linhas iniciando com `  * ` (dois espa√ßos antes do asterisco)
  - Negrito inline usando `**assim**`
- N√ÉO use n√∫meros ordenados, tabelas, blocos de c√≥digo, cita√ß√µes, imagens ou qualquer outro markdown al√©m de **negrito**.
- N√£o invente APIs, fun√ß√µes ou arquivos que n√£o estejam no c√≥digo. Se fizer alguma infer√™ncia, prefixe com **Infer√™ncia:**. Se algo n√£o puder ser determinado, escreva **N√£o identificado no c√≥digo**.
- Caso o script seja muito diferente do exemplo de estrutura, voc√™ pode criar novas se√ß√µes relevantes para aquele caso, **desde que siga as marca√ß√µes e explique porque a se√ß√£o √© necess√°ria**.
- Sempre siga o estilo, detalhamento e encadeamento l√≥gico do exemplo de sa√≠da fornecido.

OBJETIVO:
Gerar uma documenta√ß√£o clara, completa e execut√°vel para o arquivo analisado, seguindo a estrutura abaixo, mas sendo flex√≠vel para adicionar/retirar se√ß√µes conforme o tipo de script.

H1: Documenta√ß√£o ‚Äì {nome_arquivo}

H2: Resumo da aplica√ß√£o
- Explique, em 1‚Äì3 par√°grafos, o que o script faz e qual problema resolve.
- Inclua informa√ß√µes sobre escopo, entradas e sa√≠das.
- Se aplic√°vel, destaque se o script atua como **monitor**, **conector de API**, **processador de dados**, **pipeline**, etc.
- Caso detecte que h√° integra√ß√£o com outros sistemas, especifique o papel deste script no todo.

H2: Funcionamento da aplica√ß√£o
- Descreva o comportamento geral, incluindo intera√ß√µes com usu√°rios, arquivos, banco de dados e servi√ßos externos.

- Informe se √© execu√ß√£o √∫nica, cont√≠nua ou agendada.

H2: Pr√©-requisitos
* **Vers√£o do Python:** informe a vers√£o m√≠nima suportada, se poss√≠vel.
* **Bibliotecas Python (pip):** liste todas as libs externas detectadas (ex.: **python-dotenv**, **requests**), explicando:
  * **Nome da biblioteca**
  * **Uso no c√≥digo**
  * **Impacto se ausente**
* **M√≥dulos nativos:** liste (`os`, `sys`, `datetime`, etc.) com descri√ß√£o de uso.
* **Servi√ßos/Recursos externos:** APIs, bancos, filas, sistemas de arquivos, servi√ßos de autentica√ß√£o.
* **Arquivos necess√°rios:** caminhos, formatos e conte√∫do esperado (ex.: `.env`, CSV, JSON).
* **Drivers/Extens√µes:** ex.: **pyodbc** para MS SQL Server.

H2: Par√¢metros de execu√ß√£o (CLI e Ambiente)
* **Argumentos de linha de comando:** liste nome, tipo, obrigatoriedade, valor default e exemplos.
* **Vari√°veis de ambiente (.env):** chaves, fun√ß√£o e tipo de valor esperado.
* **Constantes internas:** valores fixos que alteram a l√≥gica do script.

H2: Fluxo de Execu√ß√£o Detalhado
* Explique passo a passo na ordem real:
  * Inicializa√ß√£o e carregamento de configura√ß√µes
  * Conex√µes externas (DB, API)
  * Processamentos principais (transforma√ß√µes, filtros, agrega√ß√µes)
  * Decis√µes e bifurca√ß√µes de fluxo
  * Sa√≠das (logs, arquivos, inserts em DB, retornos)
  * Entre outros parad√≠gmas relevantes caso o script necessite da explica√ß√£o deles
* Indique quais trechos bloqueiam a execu√ß√£o (aguardam resposta, loop infinito, etc.).
* Aqui eu quero bem detalhado

H2: Fun√ß√µes e Classes (se houver)
* Para cada fun√ß√£o/classe:
  * **Nome**
  * **Prop√≥sito**
  * **Par√¢metros:** nome, tipo, obrigat√≥rio/opcional, default
  * **Retorno:** tipo e significado
  * **Efeitos colaterais:** escrita em DB, arquivos, vari√°veis globais
  * **Erros/Exce√ß√µes:** tratados ou propagados

H2: Integra√ß√µes e Consultas (DB/API)
* **Conex√µes de banco:** nome l√≥gico, m√©todo de conex√£o, credenciais via `.env` (**n√£o exponha valores**)
* **Consultas SQL:** descreva o objetivo de cada query (filtragem, agrega√ß√£o, ordena√ß√£o).
* **APIs chamadas:** endpoint, m√©todo HTTP, dados enviados/recebidos.
* **Filtragens cr√≠ticas:** condi√ß√µes `WHERE`, par√¢metros de URL, etc.

H2: Logs e Observabilidade
* Onde e como os logs s√£o gravados.
* Formato das mensagens.
* Eventos cr√≠ticos logados.

H2: Tratamento de erros, exce√ß√µes e limites conhecidos
* Tipos de erros tratados e como s√£o manipulados.
* Situa√ß√µes n√£o tratadas e riscos.

Importante:
- Se detectar que o c√≥digo √© muito diferente do exemplo (ex.: script de ETL, automa√ß√£o de planilhas, web scraper), crie se√ß√µes adicionais espec√≠ficas (ex.: ‚ÄúH2: Mapeamento de Campos‚Äù, ‚ÄúH2: Regras de Pagina√ß√£o‚Äù, ‚ÄúH2: Autentica√ß√£o‚Äù) seguindo o mesmo padr√£o de formata√ß√£o.
- Nunca misture informa√ß√µes de diferentes partes sem deixar claro se √© **Fato do c√≥digo** ou **Infer√™ncia**.
- Sempre mantenha profundidade t√©cnica ‚Äî explique n√£o apenas **o que** √© feito mas **como** tamb√©m

üìå EXEMPLO DE RESPOSTA ESPERADA (SIGA O FORMATO E DETALHES ABAIXO):

H1: Documenta√ß√£o ‚Äì alerta_ocorrencias_api_tecmar_nt

H2: Resumo da aplica√ß√£o
Esta aplica√ß√£o consiste em um script Python (alerta_ocorrencias_api_tecmar_nt.py) que funciona como um **monitor de sa√∫de** para uma integra√ß√£o de dados espec√≠fica: o recebimento de ocorr√™ncias da transportadora Tecmar no sistema de Tracking. Diferente de um simples monitor de contagem de registros, este script verifica o **"pulso"** da integra√ß√£o.
Ele consulta o banco de dados **TRACKING** para encontrar o hor√°rio exato da √∫ltima ocorr√™ncia enviada pela API da Tecmar. Se o tempo decorrido desde essa √∫ltima atualiza√ß√£o ultrapassar um limite configur√°vel (passado como par√¢metro), o script assume que a integra√ß√£o est√° com problemas e dispara um alerta para a equipe respons√°vel.

H2: Funcionamento da aplica√ß√£o

H2: Pr√©-requisitos
* **Bibliotecas Python:**
  * **python-dotenv:** Para gerenciamento de vari√°veis de ambiente.
  * **Nota:** Requer um driver de banco de dados para **MS SQL Server** (como **pyodbc**), que √© utilizado dentro do m√≥dulo **tools**.
* **M√≥dulos Nativos:** os, sys, datetime.
* **Arquivos Necess√°rios:**
  * **M√≥dulo tools** acess√≠vel via `pathtools` de acordo com o SO.
  * Um arquivo **.env** no diret√≥rio de ferramentas para armazenar as credenciais dos bancos de dados.
* **Par√¢metros de Linha de Comando:**
  * O script precisa ser executado com par√¢metros que definem seu comportamento: **[template] [atraso_max_em_horas] [destinatario1] [destinatario2] ...**

H2: Fluxo de Execu√ß√£o Detalhado
* **Inicializa√ß√£o e Leitura de Par√¢metros:** O script define os caminhos de sistema, carrega as vari√°veis de ambiente e l√™ os par√¢metros da linha de comando. Os par√¢metros cruciais s√£o o tempo m√°ximo de atraso permitido (em horas, ex: "24" ou "17.5") e a lista de contatos que devem ser notificados.
* **Consulta da √öltima Ocorr√™ncia:** O script se conecta ao banco de dados **TRACKING** e executa uma consulta SQL espec√≠fica na tabela **TK_PROT_RECEBE_OCORRENCIAS**. A consulta busca o valor m√°ximo da coluna **DataIntegracao** (o timestamp mais recente) exclusivamente para os registros inseridos pelo usu√°rio '**API TECMAR%**'. Isso isola o monitoramento apenas para a integra√ß√£o da Tecmar.
* **C√°lculo do Atraso:** Ap√≥s obter o timestamp do √∫ltimo registro, o script o subtrai da data e hora atuais. O resultado √© a dura√ß√£o exata desde que a Tecmar enviou a √∫ltima ocorr√™ncia. Esse valor √© ent√£o convertido para um total de horas.
* **An√°lise do Atraso:** O tempo de atraso calculado em horas √© comparado com o limite m√°ximo de atraso que foi fornecido como par√¢metro na linha de comando.
* **Gera√ß√£o de Alerta (Atraso Excedido):** Se o atraso calculado for maior ou igual ao limite permitido, o script entra no modo de alerta. Ele formata uma mensagem detalhada, informando que a integra√ß√£o da Tecmar n√£o envia dados h√° um determinado n√∫mero de horas e minutos.
* **Enfileiramento do Alerta:** O script se conecta ao banco de dados **TORRE_CONTROLE** e, para cada destinat√°rio da lista, insere uma nova linha na tabela **alerta_mensagens**. Essa linha cont√©m a mensagem de alerta e os detalhes de envio, colocando a notifica√ß√£o na fila para ser despachada.
* **Finaliza√ß√£o (Fluxo Normal):** Se o atraso calculado estiver dentro do limite aceit√°vel, o script considera a integra√ß√£o saud√°vel e encerra sua execu√ß√£o silenciosamente, sem gerar nenhum alerta.

H2: Fun√ß√µes Auxiliares Principais
A l√≥gica do script √© executada de forma linear em um fluxo √∫nico e n√£o define fun√ß√µes auxiliares pr√≥prias. Ele depende inteiramente de fun√ß√µes do m√≥dulo externo **tools** para tarefas padronizadas, como a conex√£o com os bancos de dados (**t.connect_db**, **t.close_db**) e o registro de logs (**t.log2**).

=== METADADOS ===
Nome do arquivo: {nome_arquivo}
Contexto adicional (opcional, pode usar para refinar entendimento): {contexto_extra}

=== C√ìDIGO A SER ANALISADO (IN√çCIO) ===
{codigo}
=== C√ìDIGO A SER ANALISADO (FIM) ===
"""