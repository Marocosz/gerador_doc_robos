import os
from groq import Groq
from docx import Document
from docx.shared import Inches
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# --- 1. CONFIGURA√á√ÉO ---

# NOVO: INSTRU√á√ïES PARA A IA SE TORNAR UMA ESPECIALISTA EM DOCUMENTA√á√ÉO
# Este prompt ensina a IA a analisar c√≥digo e gerar a documenta√ß√£o no formato exato que queremos.
INSTRUCOES_IA = """
Voc√™ √© um assistente de IA especializado em analisar c√≥digo Python e criar documenta√ß√£o t√©cnica detalhada. Sua tarefa √© gerar uma documenta√ß√£o para o script que fornecerei, seguindo rigorosamente a estrutura e o formato definidos abaixo.

**ESTRUTURA OBRIGAT√ìRIA DA DOCUMENTA√á√ÉO:**

**Documenta√ß√£o ‚Äì [Nome do Script]**

**√Årea relacionada**
[Analise o c√≥digo e o contexto para preencher a √°rea de neg√≥cio ou sistema principal]

**Frequ√™ncia**
[Analise a linha do crontab fornecida para descrever a frequ√™ncia em linguagem natural]

**Servidor**
[IP do Servidor de Aplica√ß√£o] (Se n√£o souber, mantenha este texto como placeholder)

**Resumo da aplica√ß√£o**
[Escreva um par√°grafo conciso explicando o objetivo principal e a fun√ß√£o do script, com base na an√°lise do c√≥digo.]

**Funcionamento da aplica√ß√£o**

**Pr√©-requisitos**
* **Bibliotecas Python:**
    * [Liste aqui as bibliotecas n√£o nativas importadas (ex: pandas, requests, SQLAlchemy, etc.).]
    * [Liste aqui os m√≥dulos nativos do Python utilizados (ex: os, sys, datetime, etc.).]
* **Arquivos Necess√°rios:**
    * [Descreva os arquivos de configura√ß√£o, m√≥dulos externos ou outros arquivos que o script precisa para funcionar, como o m√≥dulo 'tools' e o arquivo '.env'.]
* **Par√¢metros de Linha de Comando:**
    * [Se o script usar `sys.argv`, descreva aqui quais par√¢metros ele espera e em que ordem.]

**Fluxo de Execu√ß√£o Detalhado**
[Descreva o passo a passo l√≥gico do script em par√°grafos. Use t√≠tulos em negrito para cada etapa principal, como "Inicializa√ß√£o", "Conex√£o com Banco de Dados", "Processamento em Loop", "Tratamento de Erro", "Finaliza√ß√£o", etc. Seja detalhado e t√©cnico.]

**L√≥gica por Cliente (Opcional)**
[Se o script tiver l√≥gicas diferentes para clientes espec√≠ficos, detalhe aqui como cada um √© identificado e processado. Se n√£o for o caso, omita esta se√ß√£o.]

**Fun√ß√µes Auxiliares Principais**
[Descreva o prop√≥sito de cada fun√ß√£o definida no script. Se o script n√£o tiver fun√ß√µes auxiliares pr√≥prias e usar apenas as de um m√≥dulo externo como o 'tools', declare isso.]


**INFORMA√á√ïES QUE VOC√ä DEVE USAR PARA GERAR A DOCUMENTA√á√ÉO:**

**1. NOME DO SCRIPT:**
[Digite o nome do arquivo, ex: meu_script.py]

**2. C√ìDIGO-FONTE DO SCRIPT PYTHON:**
```python
[COLE O C√ìDIGO COMPLETO DO SCRIPT AQUI]
Descreva o que acontece quando uma entrada (ex: um e-mail) n√£o corresponde a nenhum dos clientes configurados. Qual √© o fluxo de exce√ß√£o ou o caminho alternativo?
"""

# NOVO: MODELO DE IA MAIS POTENTE
# Analisar c√≥digo √© uma tarefa complexa. Um modelo mais robusto como o Mixtral ou Llama3-70b √© recomendado.
modelo_ia = "mixtral-8x7b-32768"

# NOME DO ARQUIVO DE SA√çDA
nome_arquivo_saida = "Documentacao_Script_NFS.docx"

# NOVO: PROMPT DO USU√ÅRIO AGORA √â O C√ìDIGO-FONTE A SER DOCUMENTADO
# Simplesmente cole o c√≥digo completo que voc√™ quer documentar aqui dentro.
prompt_usuario = ""

def gerar_conteudo_com_ia(instrucoes: str, prompt: str, modelo: str) -> str:
    """
    Envia o prompt para a API da Groq e retorna a resposta da IA.
    """
    print("ü§ñ Analisando o c√≥digo e gerando a documenta√ß√£o com a IA...")
    try:
        api_key = os.environ.get("GROQ_API_KEY")
        if not api_key:
            raise ValueError("A vari√°vel de ambiente GROQ_API_KEY n√£o foi definida. Verifique seu arquivo .env.")
            
        client = Groq(api_key=api_key)
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": instrucoes,
                },
                {
                    "role": "user",
                    "content": prompt,
                },
            ],
            model=modelo,
            temperature=0.2, # Baixa temperatura para a IA seguir as regras mais estritamente
        )
        print("‚úÖ Documenta√ß√£o gerada com sucesso!")
        return chat_completion.choices[0].message.content
    except Exception as e:
        print(f"‚ùå Erro ao se comunicar com a API da Groq: {e}")
        return ""

def criar_docx_formatado(conteudo: str, nome_arquivo: str):
    """
    Cria um arquivo .docx formatado a partir de um texto com sintaxe Markdown simples.
    """
    print(f"üìÑ Criando o arquivo .docx '{nome_arquivo}'...")
    doc = Document()
    doc.core_properties.title = "Documenta√ß√£o de Script"
    doc.core_properties.author = "Gerador de Documenta√ß√£o com IA"

    # Define a margem do documento
    sections = doc.sections
    for section in sections:
        section.top_margin = Inches(1)
        section.bottom_margin = Inches(1)
        section.left_margin = Inches(1)
        section.right_margin = Inches(1)

    linhas = conteudo.strip().split('\n')

    for linha in linhas:
        linha_strip = linha.strip()
        if linha_strip.startswith('## '):
            doc.add_heading(linha_strip[3:], level=2)
        elif linha_strip.startswith('# '):
            doc.add_heading(linha_strip[2:], level=1)
        elif linha_strip.startswith('- **`'): # Para a lista de fun√ß√µes
            # L√≥gica para separar o nome da fun√ß√£o da descri√ß√£o
            partes = linha_strip.split('`**: ')
            if len(partes) > 1:
                nome_funcao = partes[0].replace('- **`', '')
                descricao = partes[1]
                p = doc.add_paragraph(style='List Bullet')
                p.add_run(f'{nome_funcao}`').bold = True
                p.add_run(f': {descricao}')
            else:
                doc.add_paragraph(linha, style='List Bullet')
        elif linha_strip.startswith('- '):
            doc.add_paragraph(linha_strip[2:], style='List Bullet')
        elif linha_strip.startswith('* **'): # Para a lista de clientes
            p = doc.add_paragraph(style='List Bullet')
            p.add_run(linha_strip.replace('* **', '').replace('**', '')).bold = True
        else:
            # Adiciona um par√°grafo normal
            doc.add_paragraph(linha)

    try:
        doc.save(nome_arquivo)
        print(f"‚úÖ Documento '{nome_arquivo}' salvo com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao salvar o arquivo .docx: {e}")

if __name__ == "__main__":
    if not prompt_usuario.strip():
        print("‚ùå Erro: A vari√°vel 'prompt_usuario' est√° vazia. Cole o c√≥digo a ser documentado dentro dela.")
    else:
        conteudo_gerado = gerar_conteudo_com_ia(INSTRUCOES_IA, prompt_usuario, modelo_ia)
        if conteudo_gerado:
            criar_docx_formatado(conteudo_gerado, nome_arquivo_saida)