import os
import sys
from groq import Groq
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from dotenv import load_dotenv

# --- INICIALIZA√á√ÉO E CONFIGURA√á√ÉO ---

# Usando sua fun√ß√£o importada
# Certifique-se de que o arquivo 'functions.py' est√° no mesmo diret√≥rio ou no PYTHONPATH
try:
    from functions import ler_conteudo_py
except ImportError:
    print("‚ùå Erro: N√£o foi poss√≠vel encontrar o arquivo 'functions.py'.")
    print("   Certifique-se de que ele est√° no mesmo diret√≥rio que este script.")
    sys.exit(1)

load_dotenv()

# Caminho do arquivo a ser documentado est√° definido diretamente no c√≥digo.
caminho_do_arquivo_alvo = "C:\\Users\\marcos.rodrigues\\Documents\\documentation\\doc_bic_distribui_xml.py"
print(f"üìÑ Lendo o arquivo alvo: {caminho_do_arquivo_alvo}")


# Chama sua fun√ß√£o importada para ler o arquivo
str_codigo_fonte, nome_arquivo = ler_conteudo_py(caminho_do_arquivo_alvo)

# Valida se a leitura do arquivo foi bem-sucedida
if not str_codigo_fonte or not nome_arquivo:
    print(f"‚ùå Erro ao ler o arquivo: {caminho_do_arquivo_alvo}. Verifique o caminho e a fun√ß√£o 'ler_conteudo_py'.")
    sys.exit(1)

# Sanitiza o c√≥digo-fonte para evitar conflitos com a formata√ß√£o do prompt da IA
str_codigo_safe = str_codigo_fonte.replace("```", "'''").replace('"""', "'''")


# --- PROMPT PARA A INTELIG√äNCIA ARTIFICIAL (COM EXEMPLOS COMPLETOS E REGRAS R√çGIDAS) ---

INSTRUCOES_IA = f"""
Voc√™ √© um assistente de IA especialista em criar documenta√ß√£o t√©cnica detalhada e factual para scripts Python.

**INSTRU√á√ÉO PRINCIPAL:**
Sua tarefa √© gerar uma documenta√ß√£o para o script fornecido. Estude os **tr√™s exemplos completos e de alta qualidade** abaixo. Eles s√£o seu **guia de estilo, tom e, mais importante, N√çVEL DE DETALHE**. A estrutura (as se√ß√µes H2) deve ser **adaptada** ao script que voc√™ est√° analisando.

**REGRAS ANTI-ALUCINA√á√ÉO (MUITO IMPORTANTE):**
- **BASEIE-SE APENAS NO C√ìDIGO-FONTE FORNECIDO.** N√£o invente funcionalidades, bibliotecas, nomes de arquivos, par√¢metros ou l√≥gicas que n√£o est√£o explicitamente no c√≥digo.
- **SE UMA INFORMA√á√ÉO N√ÉO EST√Å NO C√ìDIGO, N√ÉO A ADICIONE.** √â melhor omitir um detalhe do que inventar um. Se n√£o conseguir determinar uma informa√ß√£o (como 'Frequ√™ncia' ou 'Servidor'), declare isso explicitamente. Exemplo: "A frequ√™ncia de execu√ß√£o n√£o pode ser determinada a partir do c√≥digo-fonte."
- **FOQUE EM DESCREVER O QUE EXISTE.** Sua tarefa √© documentar o script como ele √©, n√£o como ele poderia ser. N√£o fa√ßa suposi√ß√µes sobre o ambiente ou sobre m√≥dulos externos (como 'tools').

**REGRAS DE DETALHAMENTO:**
- **V√Å AL√âM DO √ìBVIO:** Explique o **prop√≥sito de neg√≥cio** de cada etapa, as **decis√µes de design** (por que foi feito assim?) e como as partes se conectam.
- **SEJA T√âCNICO E PRECISO:** Use os nomes corretos de vari√°veis, fun√ß√µes e tabelas mencionados no c√≥digo.
- **ADAPTE A ESTRUTURA:** Omita se√ß√µes dos exemplos que n√£o se aplicam e adicione novas se√ß√µes se o script tiver funcionalidades √∫nicas que mere√ßam destaque.

**REGRAS DE FORMATA√á√ÉO OBRIGAT√ìRIAS:**
- T√≠tulo principal: `H1: `
- T√≠tulos de se√ß√£o: `H2: `
- Listas: `* ` (use `  * ` para listas aninhadas).
- Negrito: `**este exemplo**`.

---
**EXEMPLO DE DOCUMENTA√á√ÉO 1 (FOCO EM HEALTH CHECK DE BANCO DE DADOS):**

H1: Documenta√ß√£o ‚Äì alerta_tracking.py

H2: √Årea relacionada
* Logix

H2: Frequ√™ncia
* O script √© executado a cada 15 minutos, todos os dias.

H2: Servidor
* 192.168.102.169

H2: Resumo da aplica√ß√£o
Esta aplica√ß√£o consiste em um script Python (alerta_tracking.py) que funciona como um monitor de sa√∫de (health check) para o banco de dados do sistema de Tracking. Seu √∫nico objetivo √© verificar se o banco de dados TRACKING est√° online e respondendo a conex√µes. Para isso, ele tenta se conectar e executar uma consulta extremamente simples. Se a conex√£o ou a consulta falharem, o script assume que o banco de dados est√° com problemas e imediatamente dispara um alerta. O alerta √© inserido na tabela alerta_mensagens (no banco TORRE_CONTROLE) para notificar a equipe de TI respons√°vel sobre a indisponibilidade.

H2: Pr√©-requisitos
* **Bibliotecas Python:**
  * **N√£o Nativas:** python-dotenv. Nota: Requer um driver de banco de dados (como pyodbc ou psycopg2), que √© utilizado dentro do m√≥dulo 'tools'.
  * **Nativas:** os, sys, datetime.
* **Arquivos Necess√°rios:**
  * M√≥dulo 'tools' acess√≠vel via path.
  * Um arquivo .env no diret√≥rio de ferramentas para armazenar as credenciais dos bancos de dados.
* **Par√¢metros de Linha de Comando:** O script precisa ser executado com par√¢metros que definem o canal do alerta e os destinat√°rios: `[template] [destinatario1] [destinatario2] ...`

H2: Fluxo de Execu√ß√£o Detalhado
**Inicializa√ß√£o e Leitura de Par√¢metros:** O script define os caminhos de sistema, carrega as vari√°veis de ambiente e l√™ os par√¢metros passados via linha de comando para determinar o modelo da mensagem e a lista de contatos que devem ser notificados em caso de falha.
**Verifica√ß√£o de Sa√∫de do Banco de Dados (Health Check):** Esta √© a etapa central. O script tenta se conectar ao banco de dados TRACKING. Se a conex√£o for bem-sucedida, ele executa uma consulta m√≠nima (`SELECT 1;`), que n√£o busca dados reais, mas serve apenas para confirmar que o banco est√° funcional e apto a processar requisi√ß√µes. Toda essa opera√ß√£o √© envolvida por um bloco `try...except` para capturar qualquer tipo de erro de conex√£o ou execu√ß√£o.
**An√°lise do Resultado:** Uma falha √© determinada por duas condi√ß√µes: 1) Se ocorrer qualquer exce√ß√£o durante a tentativa de conex√£o ou de execu√ß√£o da consulta. 2) Se a consulta for executada com sucesso, mas n√£o retornar o resultado esperado (uma linha), indicando um comportamento an√¥malo. Se qualquer uma dessas condi√ß√µes for verdadeira, uma flag interna de erro √© ativada.
**Tratamento de Sucesso:** Se, ap√≥s a verifica√ß√£o, a flag de erro permanecer desativada, o script considera que o banco de dados TRACKING est√° saud√°vel e encerra sua execu√ß√£o imediatamente, sem realizar nenhuma a√ß√£o.
**Gera√ß√£o de Alerta em Caso de Falha:** Se a flag de erro for ativada, o script entra no modo de alerta. Ele constr√≥i uma mensagem padr√£o informando qual banco de dados (TRACKING) parou de responder e o hor√°rio da ocorr√™ncia.
**Enfileiramento do Alerta:** O script ent√£o se conecta a um segundo banco de dados, o TORRE_CONTROLE. Ele percorre a lista de destinat√°rios recebida como par√¢metro e, para cada um, insere uma nova linha na tabela `alerta_mensagens`. Essa linha cont√©m a mensagem de falha e os detalhes para o envio, efetivamente "enfileirando" o alerta para ser despachado por um sistema de notifica√ß√£o separado.
**Finaliza√ß√£o:** Ap√≥s registrar todos os alertas, a conex√£o com o banco TORRE_CONTROLE √© fechada, e o script termina.

H2: Fun√ß√µes Auxiliares Principais
A l√≥gica do script √© executada de forma linear em um fluxo √∫nico e n√£o define fun√ß√µes auxiliares pr√≥prias. Ele depende inteiramente de fun√ß√µes do m√≥dulo externo 'tools' para tarefas padronizadas, como a conex√£o com os bancos de dados (t.connect_db), o fechamento dessas conex√µes (t.close_db) e o registro de logs (t.log).

---
**EXEMPLO DE DOCUMENTA√á√ÉO 2 (FOCO EM MONITORAMENTO DE API):**

H1: Documenta√ß√£o ‚Äì alerta_usr_api_wms.py

H2: √Årea relacionada
* Logix

H2: Frequ√™ncia
* O script √© executado a cada 10 minutos, todos os dias.

H2: Servidor
* 192.168.102.169

H2: Resumo da aplica√ß√£o
Esta aplica√ß√£o consiste em um script Python (alerta_usr_api_wms.py) que funciona como uma ferramenta de monitoramento proativo. Seu objetivo √© verificar continuamente se as credenciais de um usu√°rio de sistema, utilizado para integra√ß√µes via API com o Protheus/WMS, est√£o ativas e funcionando corretamente. O script opera no modelo "sil√™ncio em caso de sucesso": ele tenta se autenticar na API e, se conseguir, n√£o faz nada. Caso a autentica√ß√£o falhe por qualquer motivo (senha expirada, usu√°rio bloqueado, API fora do ar), ele imediatamente gera um alerta. Esse alerta √© inserido em uma tabela de controle (alerta_mensagens) para ser enviado a uma lista de destinat√°rios, garantindo que a equipe respons√°vel seja notificada rapidamente sobre a falha.

H2: Pr√©-requisitos
* **Bibliotecas Python:**
  * **N√£o Nativas:** requests, python-dotenv.
  * **Nativas:** os, sys, datetime, json.
* **Arquivos Necess√°rios:**
  * M√≥dulo 'tools' acess√≠vel via pathtools.
  * Um arquivo .env para armazenar as credenciais da API no formato `usr_api_[identificador]` e `pwd_api_[identificador]`.
* **Par√¢metros de Linha de Comando:** `[canal_de_alerta] [identificador_do_usuario] [destinatario1] [destinatario2] ...`

H2: Fluxo de Execu√ß√£o Detalhado
**Inicializa√ß√£o e Leitura de Par√¢metros:** O script define os caminhos de sistema, carrega as vari√°veis de ambiente e l√™ os par√¢metros da linha de comando para determinar o identificador do usu√°rio a ser testado (ex: 'canadian'), o canal de alerta (ex: 'WA') e a lista de destinat√°rios.
**Busca de Credenciais:** Utilizando o identificador, o script busca as credenciais correspondentes (usu√°rio e senha) no arquivo .env.
**Tentativa de Autentica√ß√£o na API:** O script envia uma requisi√ß√£o POST para o endpoint de autentica√ß√£o da API do WMS ([https://api.supptech.com.br/wms/api/oauth2/v1/token](https://api.supptech.com.br/wms/api/oauth2/v1/token)).
**Tratamento de Sucesso:** Se a API retornar o c√≥digo de status 201 (Created), a autentica√ß√£o foi bem-sucedida, e o script encerra silenciosamente.
**Gera√ß√£o de Alerta em Caso de Falha:** Se o c√≥digo de status for diferente de 201, o script trata como uma falha, construindo uma mensagem de erro detalhada.
**Enfileiramento do Alerta:** O script conecta-se ao banco TORRE_CONTROLE e insere uma nova linha na tabela `alerta_mensagens` para cada destinat√°rio, enfileirando os alertas para envio.
**Finaliza√ß√£o:** A conex√£o com o banco √© fechada e o script termina.

H2: Fun√ß√µes Auxiliares Principais
* **main():** Concentra todo o fluxo de trabalho.
* O script utiliza fun√ß√µes do m√≥dulo externo 'tools' para tarefas padronizadas (conex√£o com DB, logs, etc.).

---
**EXEMPLO DE DOCUMENTA√á√ÉO 3 (FOCO EM PROCESSAMENTO DE E-MAILS):**

H1: Documenta√ß√£o ‚Äì nfs_captura_anexos_remove.py

H2: √Årea relacionada
* Logix

H2: Frequ√™ncia
* O script √© executado a cada 5 minutos, todos os dias.

H2: Servidor
* 192.168.102.169

H2: Resumo da aplica√ß√£o
Esta aplica√ß√£o consiste em um script Python (nfs_captura_anexos_remove.py) que funciona como um processador de e-mails automatizado para a caixa de entrada nfs.parceiros@supplog.com. O script l√™ os e-mails n√£o lidos, identifica a qual cliente parceiro o e-mail pertence com base em palavras-chave no assunto e, em seguida, extrai os anexos (XML, PDF e ZIP). Os arquivos XML s√£o registrados em uma tabela de controle no banco de dados (auto_nfs) e salvos em pastas de rede espec√≠ficas para serem importados pelo sistema Logix, enquanto os PDFs s√£o salvos para backup. Ap√≥s o processamento, os e-mails s√£o movidos ou deletados para manter a caixa de entrada organizada.

H2: Pr√©-requisitos
* **Bibliotecas Python:**
  * **N√£o Nativas:** python-dotenv. Nota: O script depende de bibliotecas para comunica√ß√£o com APIs (como requests), que s√£o utilizadas dentro do m√≥dulo tools.
  * **Nativas:** os, sys, datetime, pathlib, zipfile, shutil, email.
* **Arquivos Necess√°rios:**
  * M√≥dulo 'tools' acess√≠vel via pathtools de acordo com o SO.
  * Um arquivo .env no diret√≥rio de ferramentas para armazenar as vari√°veis de ambiente (credenciais do banco e da API de e-mail).

H2: Fluxo de Execu√ß√£o Detalhado
**Inicializa√ß√£o e Configura√ß√£o:** O script define os caminhos de sistema, carrega as vari√°veis de ambiente e cria um conjunto de dicion√°rios que funcionam como um mapa de configura√ß√£o. Esses dicion√°rios associam cada cliente a palavras-chave espec√≠ficas de assunto de e-mail e aos seus respectivos caminhos de pasta para salvar os arquivos XML e PDF.
**Autentica√ß√£o e Leitura de E-mails:** O script obt√©m um token de autentica√ß√£o para a conta nfs.parceiros@supplog.com e o utiliza para buscar at√© 500 e-mails que estejam marcados como "n√£o lidos" na caixa de entrada.
**Processamento e Classifica√ß√£o de E-mails:** O script inicia um loop, processando cada e-mail individualmente. A primeira etapa √© usar o assunto do e-mail para identificar o cliente correspondente, consultando o dicion√°rio de configura√ß√£o. Se nenhum cliente for identificado, o e-mail √© considerado irrelevante.
**Extra√ß√£o e Tratamento de Anexos:** Se um cliente √© identificado, o script baixa todos os anexos do e-mail. Ele trata cada tipo de anexo de forma diferente:
  * **XML:** O script primeiro tenta inserir os dados da nota (cliente, n√∫mero, s√©rie) na tabela de controle auto_nfs. Se o registro for novo (n√£o um duplicado), o arquivo XML √© salvo em duas pastas: uma para o Logix importar e outra para backup.
  * **PDF:** O arquivo √© salvo diretamente na pasta de backup do cliente.
  * **ZIP:** O arquivo .zip √© salvo em uma pasta tempor√°ria e seu conte√∫do √© extra√≠do. O script ent√£o processa os arquivos de dentro do ZIP (XMLs e PDFs) da mesma forma que faria com anexos normais.
  * **E-mail Anexado (.eml):** Se um anexo for outro e-mail, o script o abre e processa os anexos contidos nele de forma recursiva.
**Limpeza da Caixa de Entrada:** Ap√≥s processar um e-mail, uma a√ß√£o de limpeza √© executada:
  * **E-mails de Clientes Conhecidos:** S√£o marcados como "lidos" e movidos para a pasta "Itens Exclu√≠dos".
  * **E-mails de Clientes N√£o Identificados:** S√£o marcados como "lidos" e deletados permanentemente, pois n√£o s√£o relevantes para o processo.
**Finaliza√ß√£o:** Ap√≥s o loop por todos os e-mails, a conex√£o com o banco de dados √© fechada para liberar os recursos.

H2: Fun√ß√µes Auxiliares Principais
* **processa():** √â a fun√ß√£o principal que orquestra todo o fluxo de trabalho.
* **insere_auto_nfs(cliente, nome_arquivo, ...):** Fun√ß√£o crucial respons√°vel por interagir com o banco de dados. Utiliza a cl√°usula ON CONFLICT DO NOTHING do PostgreSQL para evitar a inser√ß√£o de notas duplicadas.
* **salva_anexos_XML_PDF_LOGIX(cliente, eml, ...):** Uma fun√ß√£o especializada para tratar anexos .eml.
* **find_key_with_string(dicionario, texto):** Utilit√°rio de busca que encontra o cliente com base no assunto do e-mail.
* O script depende fortemente de fun√ß√µes do m√≥dulo externo **tools**.

H2: L√≥gica por Cliente
O script utiliza dicion√°rios para gerenciar as regras de cada cliente.
* **d_assunto:** Mapeia o nome do cliente a strings de identifica√ß√£o no assunto.
* **d_pasta_logix:** Define o diret√≥rio de entrada para o Logix.
* **d_pasta_xml e d_pasta_pdf:** Definem os diret√≥rios de backup.
* **armor:** Identifica√ß√£o: "FATURAMENTO DE UBERLANDIA DO DIA ".
* **vitoria_regia:** Identifica√ß√£o: "INDUSTRIAS REUNIDAS VITORIA REGIA LTDA.: NF-e N¬∫ " ou "FATURAMENTO VITORIA R√âGIA - ".
* **dbs:** Identifica√ß√£o: "Envio". Regra Especial: extrai todos os caracteres num√©ricos do nome do arquivo para formar o n√∫mero da nota.
* **ddw:** Identifica√ß√£o: "ENC: RESUMO DE FATURAMENTO - " ou "RESUMO DE FATURAMENTO - ".
* **latin_master:** Identifica√ß√£o: "RESUMO DE FATURAMENTO LATIN MASTER".
* **epa:** Identifica√ß√£o: "OPERA√á√ÉO IPOJUCA CLIENTE:".

H2: Cliente n√£o identificado
Se o assunto de um e-mail n√£o corresponder a nenhuma palavra-chave, o script o marca como "lido" e o deleta permanentemente.
---

**SUA TAREFA AGORA:**

Baseado em **TODAS as regras acima** e nos **tr√™s exemplos completos e de alta qualidade**, analise as informa√ß√µes a seguir e gere a documenta√ß√£o mais precisa, detalhada e factual poss√≠vel para o script fornecido.

**INFORMA√á√ïES PARA AN√ÅLISE:**

**1. NOME DO SCRIPT:**
{nome_arquivo}

**2. C√ìDIGO-FONTE DO SCRIPT PYTHON:**
```python
{str_codigo_safe}
```

**TAREFA FINAL:**
Gere a documenta√ß√£o completa, detalhada e adaptada para o script `{nome_arquivo}`.
"""

# Modelo de IA e nome do arquivo de sa√≠da
modelo_ia = "llama3-70b-8192"
nome_arquivo_saida = f"DOC_{nome_arquivo.split('.')[0]}.docx"


# --- FUN√á√ïES PRINCIPAIS ---

def gerar_conteudo_com_ia(instrucoes: str, modelo: str) -> str:
    """
    Envia o prompt para a API da Groq e retorna a resposta da IA.
    """
    print("ü§ñ Analisando o c√≥digo e gerando a documenta√ß√£o com a IA (usando m√∫ltiplos exemplos e regras anti-alucina√ß√£o)...")
    try:
        api_key = os.environ.get("GROQ_API_KEY")
        if not api_key:
            raise ValueError("A vari√°vel de ambiente GROQ_API_KEY n√£o foi definida. Verifique seu arquivo .env.")
            
        client = Groq(api_key=api_key)
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": instrucoes,
                },
                {
                    "role": "user",
                    "content": f"Por favor, gere a documenta√ß√£o completa e adaptada para o script {nome_arquivo} conforme solicitado nas instru√ß√µes.",
                },
            ],
            model=modelo,
            temperature=0.0, # Temperatura zerada para m√°xima ader√™ncia aos fatos e m√≠nima criatividade
        )
        print("‚úÖ Documenta√ß√£o gerada com sucesso!")
        return chat_completion.choices[0].message.content
    except Exception as e:
        print(f"‚ùå Erro ao se comunicar com a API da Groq: {e}")
        return ""

def criar_docx_formatado(conteudo: str, nome_arquivo_final: str):
    """
    Cria um arquivo .docx com formata√ß√£o espec√≠fica, replicando o estilo do documento de exemplo.
    """
    print(f"üìÑ Criando o arquivo .docx '{nome_arquivo_final}' com formata√ß√£o avan√ßada...")
    doc = Document()
    doc.core_properties.title = "Documenta√ß√£o de Script"
    doc.core_properties.author = "Gerador de Documenta√ß√£o com IA"

    # Define a margem do documento
    for section in doc.sections:
        section.top_margin = Inches(1)
        section.bottom_margin = Inches(1)
        section.left_margin = Inches(1)
        section.right_margin = Inches(1)

    # Fun√ß√£o auxiliar para adicionar texto com negrito
    def adicionar_texto_com_negrito(paragrafo, texto):
        partes = texto.split('**')
        for i, parte in enumerate(partes):
            if i % 2 == 1: # Partes √≠mpares est√£o em negrito
                paragrafo.add_run(parte).bold = True
            else:
                paragrafo.add_run(parte)

    # Processa o conte√∫do linha por linha
    for linha in conteudo.strip().split('\n'):
        linha_strip = linha.strip()

        # T√≠tulo Principal (H1)
        if linha_strip.startswith('H1: '):
            texto_titulo = linha_strip[4:]
            p = doc.add_paragraph()
            run = p.add_run(texto_titulo)
            run.font.bold = True
            run.font.size = Pt(14)
            p.paragraph_format.space_after = Pt(12)
        
        # T√≠tulos de Se√ß√£o (H2)
        elif linha_strip.startswith('H2: '):
            texto_secao = linha_strip[4:]
            p = doc.add_paragraph()
            p.paragraph_format.space_before = Pt(12)
            run = p.add_run(texto_secao)
            run.font.bold = True
            run.font.size = Pt(12)
            p.paragraph_format.space_after = Pt(6)

        # Listas Aninhadas (com 2 espa√ßos de indenta√ß√£o)
        elif linha_strip.startswith('  * '):
            texto_lista = linha_strip[4:]
            p = doc.add_paragraph(style='List Bullet 2')
            adicionar_texto_com_negrito(p, texto_lista)

        # Listas de N√≠vel 1
        elif linha_strip.startswith('* '):
            texto_lista = linha_strip[2:]
            p = doc.add_paragraph(style='List Bullet')
            adicionar_texto_com_negrito(p, texto_lista)
        
        # Par√°grafos Normais
        else:
            if linha_strip: # Adiciona apenas se a linha n√£o estiver vazia
                p = doc.add_paragraph()
                adicionar_texto_com_negrito(p, linha_strip)

    try:
        doc.save(nome_arquivo_final)
        print(f"‚úÖ Documento '{nome_arquivo_final}' salvo com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao salvar o arquivo .docx: {e}")


# --- BLOCO DE EXECU√á√ÉO PRINCIPAL ---

if __name__ == "__main__":
    conteudo_gerado = gerar_conteudo_com_ia(INSTRUCOES_IA, modelo_ia)
    
    if conteudo_gerado:
        criar_docx_formatado(conteudo_gerado, nome_arquivo_saida)
